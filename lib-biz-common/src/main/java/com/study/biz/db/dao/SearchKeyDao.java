package com.study.biz.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.study.biz.db.bean.SearchKey;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_KEY".
*/
public class SearchKeyDao extends AbstractDao<SearchKey, Long> {

    public static final String TABLENAME = "SEARCH_KEY";

    /**
     * Properties of entity SearchKey.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HistoryId = new Property(0, Long.class, "historyId", true, "_id");
        public final static Property KeyWod = new Property(1, String.class, "keyWod", false, "keyWod");
    }


    public SearchKeyDao(DaoConfig config) {
        super(config);
    }
    
    public SearchKeyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_KEY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: historyId
                "\"keyWod\" TEXT);"); // 1: keyWod
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_KEY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchKey entity) {
        stmt.clearBindings();
 
        Long historyId = entity.getHistoryId();
        if (historyId != null) {
            stmt.bindLong(1, historyId);
        }
 
        String keyWod = entity.getKeyWod();
        if (keyWod != null) {
            stmt.bindString(2, keyWod);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchKey entity) {
        stmt.clearBindings();
 
        Long historyId = entity.getHistoryId();
        if (historyId != null) {
            stmt.bindLong(1, historyId);
        }
 
        String keyWod = entity.getKeyWod();
        if (keyWod != null) {
            stmt.bindString(2, keyWod);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchKey readEntity(Cursor cursor, int offset) {
        SearchKey entity = new SearchKey( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // historyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // keyWod
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchKey entity, int offset) {
        entity.setHistoryId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKeyWod(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchKey entity, long rowId) {
        entity.setHistoryId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchKey entity) {
        if(entity != null) {
            return entity.getHistoryId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchKey entity) {
        return entity.getHistoryId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

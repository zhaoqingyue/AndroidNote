package com.study.biz.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.study.biz.db.bean.CardBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_BEAN".
*/
public class CardBeanDao extends AbstractDao<CardBean, Long> {

    public static final String TABLENAME = "CARD_BEAN";

    /**
     * Properties of entity CardBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CardId = new Property(0, Long.class, "cardId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "userName");
        public final static Property LogoId = new Property(2, int.class, "logoId", false, "logoId");
        public final static Property CardTypeName = new Property(3, String.class, "cardTypeName", false, "cardTypeName");
        public final static Property CertificateType = new Property(4, String.class, "certificateType", false, "certificateType");
        public final static Property CertificateNumber = new Property(5, String.class, "certificateNumber", false, "certificateNumber");
        public final static Property ComputerNumber = new Property(6, String.class, "computerNumber", false, "computerNumber");
        public final static Property CardNumber = new Property(7, String.class, "cardNumber", false, "cardNumber");
        public final static Property BankName = new Property(8, String.class, "bankName", false, "bankName");
        public final static Property BankNumber = new Property(9, String.class, "bankNumber", false, "bankNumber");
        public final static Property Identity = new Property(10, String.class, "identity", false, "identity");
        public final static Property Mobile = new Property(11, String.class, "mobile", false, "mobile");
        public final static Property Account = new Property(12, String.class, "account", false, "account");
        public final static Property Password = new Property(13, String.class, "password", false, "password");
        public final static Property ItemType = new Property(14, int.class, "itemType", false, "ITEM_TYPE");
    }


    public CardBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CardBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: cardId
                "\"userName\" TEXT," + // 1: userName
                "\"logoId\" INTEGER NOT NULL ," + // 2: logoId
                "\"cardTypeName\" TEXT," + // 3: cardTypeName
                "\"certificateType\" TEXT," + // 4: certificateType
                "\"certificateNumber\" TEXT," + // 5: certificateNumber
                "\"computerNumber\" TEXT," + // 6: computerNumber
                "\"cardNumber\" TEXT," + // 7: cardNumber
                "\"bankName\" TEXT," + // 8: bankName
                "\"bankNumber\" TEXT," + // 9: bankNumber
                "\"identity\" TEXT," + // 10: identity
                "\"mobile\" TEXT," + // 11: mobile
                "\"account\" TEXT," + // 12: account
                "\"password\" TEXT," + // 13: password
                "\"ITEM_TYPE\" INTEGER NOT NULL );"); // 14: itemType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardBean entity) {
        stmt.clearBindings();
 
        Long cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindLong(1, cardId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindLong(3, entity.getLogoId());
 
        String cardTypeName = entity.getCardTypeName();
        if (cardTypeName != null) {
            stmt.bindString(4, cardTypeName);
        }
 
        String certificateType = entity.getCertificateType();
        if (certificateType != null) {
            stmt.bindString(5, certificateType);
        }
 
        String certificateNumber = entity.getCertificateNumber();
        if (certificateNumber != null) {
            stmt.bindString(6, certificateNumber);
        }
 
        String computerNumber = entity.getComputerNumber();
        if (computerNumber != null) {
            stmt.bindString(7, computerNumber);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(8, cardNumber);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(9, bankName);
        }
 
        String bankNumber = entity.getBankNumber();
        if (bankNumber != null) {
            stmt.bindString(10, bankNumber);
        }
 
        String identity = entity.getIdentity();
        if (identity != null) {
            stmt.bindString(11, identity);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(12, mobile);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(13, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(14, password);
        }
        stmt.bindLong(15, entity.getItemType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardBean entity) {
        stmt.clearBindings();
 
        Long cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindLong(1, cardId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindLong(3, entity.getLogoId());
 
        String cardTypeName = entity.getCardTypeName();
        if (cardTypeName != null) {
            stmt.bindString(4, cardTypeName);
        }
 
        String certificateType = entity.getCertificateType();
        if (certificateType != null) {
            stmt.bindString(5, certificateType);
        }
 
        String certificateNumber = entity.getCertificateNumber();
        if (certificateNumber != null) {
            stmt.bindString(6, certificateNumber);
        }
 
        String computerNumber = entity.getComputerNumber();
        if (computerNumber != null) {
            stmt.bindString(7, computerNumber);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(8, cardNumber);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(9, bankName);
        }
 
        String bankNumber = entity.getBankNumber();
        if (bankNumber != null) {
            stmt.bindString(10, bankNumber);
        }
 
        String identity = entity.getIdentity();
        if (identity != null) {
            stmt.bindString(11, identity);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(12, mobile);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(13, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(14, password);
        }
        stmt.bindLong(15, entity.getItemType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CardBean readEntity(Cursor cursor, int offset) {
        CardBean entity = new CardBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cardId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.getInt(offset + 2), // logoId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cardTypeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // certificateType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // certificateNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // computerNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cardNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bankName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bankNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // identity
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mobile
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // account
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // password
            cursor.getInt(offset + 14) // itemType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardBean entity, int offset) {
        entity.setCardId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLogoId(cursor.getInt(offset + 2));
        entity.setCardTypeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCertificateType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCertificateNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setComputerNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCardNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBankName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBankNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIdentity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMobile(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAccount(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPassword(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setItemType(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CardBean entity, long rowId) {
        entity.setCardId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CardBean entity) {
        if(entity != null) {
            return entity.getCardId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CardBean entity) {
        return entity.getCardId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.study.biz.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.study.biz.db.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "_id");
        public final static Property Token = new Property(1, String.class, "token", false, "token");
        public final static Property UserName = new Property(2, String.class, "userName", false, "userName");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "avatar");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "nickName");
        public final static Property Account = new Property(5, String.class, "account", false, "account");
        public final static Property Password = new Property(6, String.class, "password", false, "password");
        public final static Property Phone = new Property(7, String.class, "phone", false, "phone");
        public final static Property Sex = new Property(8, String.class, "sex", false, "sex");
        public final static Property Birthday = new Property(9, String.class, "birthday", false, "birthday");
        public final static Property Email = new Property(10, String.class, "email", false, "email");
        public final static Property Area = new Property(11, String.class, "area", false, "area");
        public final static Property University = new Property(12, String.class, "university", false, "university");
        public final static Property Signature = new Property(13, String.class, "signature", false, "signature");
        public final static Property ShipAddress = new Property(14, String.class, "shipAddress", false, "shipAddress");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: userId
                "\"token\" TEXT," + // 1: token
                "\"userName\" TEXT," + // 2: userName
                "\"avatar\" TEXT," + // 3: avatar
                "\"nickName\" TEXT," + // 4: nickName
                "\"account\" TEXT," + // 5: account
                "\"password\" TEXT," + // 6: password
                "\"phone\" TEXT," + // 7: phone
                "\"sex\" TEXT," + // 8: sex
                "\"birthday\" TEXT," + // 9: birthday
                "\"email\" TEXT," + // 10: email
                "\"area\" TEXT," + // 11: area
                "\"university\" TEXT," + // 12: university
                "\"signature\" TEXT," + // 13: signature
                "\"shipAddress\" TEXT);"); // 14: shipAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(6, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(12, area);
        }
 
        String university = entity.getUniversity();
        if (university != null) {
            stmt.bindString(13, university);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(14, signature);
        }
 
        String shipAddress = entity.getShipAddress();
        if (shipAddress != null) {
            stmt.bindString(15, shipAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(6, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(12, area);
        }
 
        String university = entity.getUniversity();
        if (university != null) {
            stmt.bindString(13, university);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(14, signature);
        }
 
        String shipAddress = entity.getShipAddress();
        if (shipAddress != null) {
            stmt.bindString(15, shipAddress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // account
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // password
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // birthday
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // area
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // university
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // signature
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // shipAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAccount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBirthday(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setArea(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUniversity(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSignature(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setShipAddress(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

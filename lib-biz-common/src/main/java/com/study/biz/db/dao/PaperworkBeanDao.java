package com.study.biz.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.study.biz.db.bean.PaperworkBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAPERWORK_BEAN".
*/
public class PaperworkBeanDao extends AbstractDao<PaperworkBean, Long> {

    public static final String TABLENAME = "PAPERWORK_BEAN";

    /**
     * Properties of entity PaperworkBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PaperworkId = new Property(0, Long.class, "paperworkId", true, "_id");
        public final static Property LogoId = new Property(1, int.class, "logoId", false, "logoId");
        public final static Property PaperworkTypeName = new Property(2, String.class, "paperworkTypeName", false, "paperworkTypeName");
        public final static Property UserName = new Property(3, String.class, "userName", false, "userName");
        public final static Property Identity = new Property(4, String.class, "identity", false, "identity");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "mobile");
        public final static Property Account = new Property(6, String.class, "account", false, "account");
        public final static Property Password = new Property(7, String.class, "password", false, "password");
        public final static Property ItemType = new Property(8, int.class, "itemType", false, "ITEM_TYPE");
    }


    public PaperworkBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PaperworkBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAPERWORK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: paperworkId
                "\"logoId\" INTEGER NOT NULL ," + // 1: logoId
                "\"paperworkTypeName\" TEXT," + // 2: paperworkTypeName
                "\"userName\" TEXT," + // 3: userName
                "\"identity\" TEXT," + // 4: identity
                "\"mobile\" TEXT," + // 5: mobile
                "\"account\" TEXT," + // 6: account
                "\"password\" TEXT," + // 7: password
                "\"ITEM_TYPE\" INTEGER NOT NULL );"); // 8: itemType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAPERWORK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaperworkBean entity) {
        stmt.clearBindings();
 
        Long paperworkId = entity.getPaperworkId();
        if (paperworkId != null) {
            stmt.bindLong(1, paperworkId);
        }
        stmt.bindLong(2, entity.getLogoId());
 
        String paperworkTypeName = entity.getPaperworkTypeName();
        if (paperworkTypeName != null) {
            stmt.bindString(3, paperworkTypeName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String identity = entity.getIdentity();
        if (identity != null) {
            stmt.bindString(5, identity);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(7, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(8, password);
        }
        stmt.bindLong(9, entity.getItemType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaperworkBean entity) {
        stmt.clearBindings();
 
        Long paperworkId = entity.getPaperworkId();
        if (paperworkId != null) {
            stmt.bindLong(1, paperworkId);
        }
        stmt.bindLong(2, entity.getLogoId());
 
        String paperworkTypeName = entity.getPaperworkTypeName();
        if (paperworkTypeName != null) {
            stmt.bindString(3, paperworkTypeName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String identity = entity.getIdentity();
        if (identity != null) {
            stmt.bindString(5, identity);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(7, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(8, password);
        }
        stmt.bindLong(9, entity.getItemType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PaperworkBean readEntity(Cursor cursor, int offset) {
        PaperworkBean entity = new PaperworkBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // paperworkId
            cursor.getInt(offset + 1), // logoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // paperworkTypeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // identity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // account
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // password
            cursor.getInt(offset + 8) // itemType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaperworkBean entity, int offset) {
        entity.setPaperworkId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLogoId(cursor.getInt(offset + 1));
        entity.setPaperworkTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdentity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPassword(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setItemType(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PaperworkBean entity, long rowId) {
        entity.setPaperworkId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PaperworkBean entity) {
        if(entity != null) {
            return entity.getPaperworkId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaperworkBean entity) {
        return entity.getPaperworkId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
